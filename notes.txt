    CONVERSION SPECIFIERS :
*As convercoes sao anunciadas por um '%' antes do specifier*
%c - printa um unico caracter (putchar)
%s - printa uma string (conjunto de caracteres) (putstr)
%p - um pointer tipo void tem de ser printado num formato hex (putadress)// 0x(n de hex)
    nil = null mas para pointers (return "(nil)")
%d - printa um numero decimal de base 10 (putnbr)
%i - print um int em base 10 (putnbr)
%u - print um numero unsigned decimal se base 10 (putnbr) //n trabalhar c n negativos
%x - printa um numero hex de base 16 em minusculas (hexa) // 0-9 a-f = 16 dividir por 16 
%X - printa um numero hex de base 16 em maiuscula (hexa) //
%% - printa % (putchar)	

    HEXADECIMAL:
Dizer base 16 ou hexadecimal e a mesma coisa
este e um dos 4 sistemas de numeracao ascii
os valores para representarem caracteres numa base hexa
variam entre o 0-9 e de a-f

Exemplo de conversao hexadecimal para ascii
50(16) = 5*16+0*16(0) = 80+0 = 80 => P
6C(16) = 6*16+12*16(0) = 96+12 = 108 => l
61(16) = 6*16+1*16(0) = 96+1 = 97 => a


The function itself is called as such:

    printf (const char *format, ...);

it uses a va_list to access a stack of previously undefined parameters.
The va_ family of macros uses a stack pointer, which points to the beginning 
of a varible list thence 'va_list'. This list is accessed from the arg passed to the 'va_start', 
the beginning of the stack, and then the 'va_args' nabs values from the 
stack as it goes through stack or list of potential arguements.

va_arg - usa-se para chamar o character a seguir
com va_arg n se pode usar o char pois precisa de usar um type com pelo menos 4 bytes(como int)

functions needed:
- ft_putchar
- ft_strlen
- ft_putstr
- ft_putnbr void	ft_putnbr(int n, int *len)
- ft_printf 

//write and printf return the nbr of characters printed(written)

//  Em todas as funcoes auxiliar para o printf, e preciso ter um pointer 
    len (indica para o tamanho) para ser possivel a funcao dar a contagem
    correcta de caracteres no output    //


Main function:
/*
int main(void)
{
	char *ola;
	
	printf(" NULL %s NULL \n", ola);
	ft_printf(" NULL %s NULL ", ola);
}
*/
/*
#include <stdio.h>
int main(void)
{
	char c = 'f';
	char s[] = "This is a test string.";
	void *p = (void *)s;
	int i = 12345;
	unsigned int u = 4294967295;
	unsigned int x = 42;
	unsigned int X = 42;

	printf("Original printf:\n\nPercentage: %%\nChar: %c\nStr: %s\n", c, s);
	printf("Void ptr: %p\nInt: %d or %i\nUnsig int: %u\n", p, i, i, u);
	printf("'x' conversion: %x\n'X' conversion: %X\n", x, X);
	ft_printf("---------------------------------------------");
	ft_printf("\nMy ft_printf:\n\nPercentage: %%\nChar: %c\nStr: %s\n", c, s);
	ft_printf("Void ptr: %p\nInt: %d or %i\nUnsig int: %u\n", p, i, i, u);
	ft_printf("'x' conversion: %x\n'X' conversion: %X\n\n\n", x, X);
	printf("Teste 1: %c\n", '0');
	ft_printf("Teste 1: %c\n", '0');
	printf("Teste 2:  %c \n", '0');
	ft_printf("Teste 2:  %c \n", '0');
	printf("Teste 3:  %c\n", '0' - 256);
	ft_printf("Teste 3:  %c\n", '0' - 256);
	printf("Teste 4: %c \n", '0' + 256);
	ft_printf("Teste 4: %c \n", '0' + 256);
	printf("Teste 5:  %c %c %c \n", '0', 0, '1');
	ft_printf("Teste 5:  %c %c %c \n", '0', 0, '1');
	
	return (0);
}
*/
/*
	cout << endl;
	TEST(1, print("%c", '0'));
	TEST(2, print(" %c ", '0'));
	TEST(3, print(" %c", '0' - 256));
	TEST(4, print("%c ", '0' + 256));
	TEST(5, print(" %c %c %c ", '0', 0, '1'));
	TEST(6, print(" %c %c %c ", ' ', ' ', ' '));
	TEST(7, print(" %c %c %c ", '1', '2', '3'));
	TEST(8, print(" %c %c %c ", '2', '1', 0));
	TEST(9, print(" %c %c %c ", 0, '1', '2'));
	cout << ENDL;
	return (0);

	TEST(1, print("%s", ""));
	TEST(2, print(" %s", ""));
	TEST(3, print("%s ", ""));
	TEST(4, print(" %s ", ""));
	TEST(5, print(" %s ", "-"));
	TEST(6, print(" %s %s ", "", "-"));
	TEST(7, print(" %s %s ", " - ", ""));
	TEST(8, print(" %s %s %s %s %s", " - ", "", "4", "", s2));
	TEST(9, print(" %s %s %s %s %s ", " - ", "", "4", "", "2 "));
	TEST(10, print(" NULL %s NULL ", NULL));
}
*/

PRINTF FLAGS :
'-' : creates a left justifying printf output
'0' : integar zero-fill, left-pads the number with zeros instead of spaces
'+' : means when used it will print a plus sign before the output
'#' : Used with the specifiers the value is precceeded with 0, 0x or 0X 
    for values different than 0
' ' : If no sign is going to be written, a blank space is inserted before the value.

Width is determined for integars by placing a number after the persent sign and before the specifier flag. 
like so:

    printf("%5d", 10)

for strings it is similar:

    printf("%10s","Hello")

%[flag][min width][precision][length modifier][conversion specifier]

EXEMPLES :  
    printf("%5d",10)----(OUTPUT:    '00010') *the min width output is 5 spaces*
    printf("%+5d",10)----(OUTPUT:   '  +10')
    printf("%-5d",10)----(OUTPUT:   '10   ')
    printf("%-03d", 1)----(OUTPUT:  '001')
    printf("%.2f",10.3456)----(OUTPUT:  '10.35') *duas casas decimais*
    printf("%5.2f",10.3456)----(OUTPUT:	' 10.35') *5- width and .2- decimal*